package com.coderzoe;

/**
 * @author yhs
 * @date 2020/6/1 21:54
 * @description
 */
public class ProxyMode {
    /**
     * 代理模式 AOP(面向切面编程)底层的实现原理
     * 抽象角色:一般使用后接口或抽象类 (租房)
     * 真实角色:被代理的角色(房东)
     * 代理角色:代理真实角色，代理真实角色后 我们一般会做一些附属操作(中介)
     * 客户:访问代理角色的人
     *
     * 代理模式的好处:
     * 使真实角色的操作更加纯粹 不去关心一些附属业务
     * 附属业务交给了代理角色 实现了业务的分工
     * 附属业务发生了扩展的时候 方便集中管理
     *
     * 缺点：
     * 每有一个真实角色 就得有一个代理角色 代码量翻倍(动态代理解决)
     *
     * 动态代理的代理类是动态生成的，不是我们直接写好的
     * 动态代理分为两大类 基于接口的动态代理和基于类的动态代理
     *  基于接口:JDK的动态代理
     *  基于类:cglib
     *
     *  动态代理实现原理
     *  1.通过实现 InvocationHandler 接口创建自己的调用处理器
     *  2.通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类
     *  3.通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型
     *  4.通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入
     *
     */
}
